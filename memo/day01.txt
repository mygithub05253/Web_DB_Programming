웹 : HTML, CSS
DB : MySQL, Oracle, Mongo DB, Vector DB, ...
프로그래밍 : Node.js(Javascript), Django(Python), Spring(Java), ...

Web Server란?
- 웹 브라우저 클라이언트로부터 HTTP 요청을 받아들이고 HTML 문서와 같은 웹페이지를 반환하는 컴퓨터 프로그램

WAS(Web Application Server)란?
- 인터넷 상에서 HTTP 프로토콜을 통해 사용자 컴퓨터나 장치에 애플리케이션을 수행해주는 미들웨어
- 주로 동적 서버 컨텐츠를 수행하는 것
- 일반적인 웹 서버와 구별되며 데이터베이스 서버와 같이 수행
- 웹서버가 포함된 경우도 있지만 대규모 웹 서비스를 제공할 경우 WAS와 웹 서버를 별도 사용
- 초창기 WAS 기능 : cgi 기능
- EX) Tomcat, Web sphere, Web Logic, Django

WAS 연계 언어
- PHP, JSP, ASP, Python, Node.js, Django의 template 언어

대표적인 WAS
- Apach, IIS, Nginx

웹DB 프로그래밍에서의 WAS 수행 절차
1. 클라이언트로부터 요청된 URL을 받아서 각 URL과 연결된 비즈니스 로직 호출
2. 비즈니스 로직에서 필요하면 DB에 처리(CRUD) 요청
3. DB에서 해당 처리 후 완료했다고 응답
4. 사용자에게 보내줄 HTML 파일 준비
5. HTML 파일을 웹 서버에게 보내고 웹 서버는 클라이언트에게 전송

비즈니스 로직(MVC)
1. Model
2. View
3. Controller

웹 서버의 기능
1. 도메인과 IP의 매핑 : DNS
2. IP와 홈 디렉터리 매핑
=> 홈 디렉터리 : 웹 서버가 파일을 찾기 시작하는 root 디렉터리
=> URL에 매핑되는 root 디렉터리
=> 홈 디렉터리를 반드시 지정해주어야 함
3. URL에 있는 파일 찾기
4. 응답

Node.js 특징
1. 서버의 기능

2. 런타임 기능 : 특정 언어로 만든 프로그램들을 실행할 수 있는 환경 => 자바스크립트 실행기

3. V8(오픈소스 자바스크립트 엔진)과 더불어 libuv(비동기 I/O)라는 라이브러리 사용

4. 이벤트 기반 : 이벤트 리스너에 콜백 함수 등록 => 이벤트 루프 사용
1) 이벤트 루프
=> 이벤트 발생 시 호출할 콜백 함수들을 관리하고, 호출된 콜백 함수의 실행 순서 결정 역할
=> 노드가 종료될 때까지 이벤트 처리를 위한 작업을 반복
2) 백그라운드
=> setTimeout 같은 타이머나 이벤트 리스너들이 대기하는 곳 => JS가 아닌 다른 언어로 작성된 것
3) 테스크 큐
=> 이벤트 발생 후, 백그라운드에서는 태스크 큐로 타이머나 이벤트 리스너의 콜백함수 보냄
=> 정해진 순서대로 콜백들이 줄을 서있기 때문에 콜백 큐라고도 함

5. 논 블로킹
1) 논 블로킹
=> 이전 작업이 완료될 때까지 대기하지 않고 다음 작업 수행
=> I/O와 JS 코드는 동시 실행 가능
2) 블로킹
=> 이전 작업이 끝나야만 다음 작업 수행
=> JS 코드는 동시 실행 불가능

6. 싱글 스레드
1) 프로세스
=> 운영체제에서 할당하는 작업의 단위
=> 노드나 웹 브라우저 같은 프로그램은 개별적인 프로세스
2) 스레드
=> 프로세스 내에서 실행되는 흐름의 단위
=> 하나의 프로세스가 스레드를 여러 개 생성해 여러 작업 동시 처리 가능
=> 스레드는 부모 프로세스의 자원을 공유
=> 같은 주소의 메모리에 접근 가능하므로 데이터 공유
3) 노드는 싱글 스레드 => 정확하게 따지면 멀티 스레드
4) 노드 실행 -> 프로세스 생성 -> 스레드 여러 개 생성 -> 프로그래머가 직업 제어 가능한 스레드는 단 1개
5) 요청이 여러 개 들어올 경우 한 번에 하나씩 요청을 처리하지만 블로킹이 발생할 것 같은 경우 논 블로킹 방법으로 대기 시간 절약 가능

스레드풀
- 노드가 특정 동작을 수행할 때 스스로 멀티 스레드 사용
- EX) 암호화, 파일 입출력, 압축 등

워커 스레드
- 노드 12버전에서 안정화된 기능으로 멀티 스레드를 사용할 수 있는 도구

Node.js의 이벤트 기반 과정
=> 호출 스택이 비어있을 경우 테스크 큐에서 하나씩 호출 스택으로 가져와 실행
1. 호출 스택(setTimeout(), anonymous 등)에 쌓임
2. setTimeout 등 호출 스택 실행 시 콜백 함수는 백그라운드로 보내짐
3. 백그라운드에서 일정 행동 수행 후 테스크 큐로 보냄


